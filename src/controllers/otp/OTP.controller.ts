// NOTIFICATIONS-SERVICE/src/controllers/otpController.ts
import { Request, Response, NextFunction } from "express";
import { OTPService } from "../../services/otp/OTP.service";
import { AppError } from "../../utils/AppError";

export class OTPController {
  private otpService: OTPService;

  constructor() {
    this.otpService = new OTPService();
  }

  public sendOTP = async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { email, purpose = "registration", name } = req.body;

      console.log("üì§ [OTP SEND] Recebendo requisi√ß√£o:", {
        email,
        purpose,
        name,
      });

      if (!email) {
        throw new AppError("Email √© obrigat√≥rio", 400, "MISSING_EMAIL");
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        throw new AppError("Formato de email inv√°lido", 400, "INVALID_EMAIL");
      }

      const result = await this.otpService.sendOTP(email, purpose, name);

      if (!result.success) {
        throw new AppError(
          `Aguarde ${result.retryAfter} segundos para solicitar um novo c√≥digo`,
          429,
          "OTP_RATE_LIMITED"
        );
      }

      console.log(`‚úÖ [OTP SEND] OTP enviado com sucesso para: ${email}`);

      res.status(200).json({
        success: true,
        message: "C√≥digo de verifica√ß√£o enviado para seu email",
        data: {
          email,
          purpose,
          expiresIn: "10 minutos",
        },
      });
    } catch (error) {
      next(error);
    }
  };

  public verifyOTP = async (
    req: Request,
    res: Response,
    next: NextFunction
  ) => {
    try {
      console.log("üîê [OTP VERIFY] Recebendo requisi√ß√£o:", req.body);

      // ‚úÖ CORRE√á√ÉO: Aceitar tanto 'otpCode' quanto 'code' para compatibilidade
      const { email, otpCode, code, purpose = "registration" } = req.body;

      // ‚úÖ Compatibilidade: usar 'code' se 'otpCode' n√£o estiver presente
      const finalOtpCode = otpCode || code;

      // ‚úÖ VALIDA√á√ïES DETALHADAS
      if (!email || !finalOtpCode) {
        console.log("‚ùå [OTP VERIFY] Campos obrigat√≥rios faltando:", {
          email,
          receivedOtpCode: otpCode,
          receivedCode: code,
          finalOtpCode,
        });
        throw new AppError(
          "Email e c√≥digo s√£o obrigat√≥rios",
          400,
          "MISSING_CREDENTIALS"
        );
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        console.log("‚ùå [OTP VERIFY] Email inv√°lido:", email);
        throw new AppError("Formato de email inv√°lido", 400, "INVALID_EMAIL");
      }

      if (!/^\d{6}$/.test(finalOtpCode)) {
        console.log("‚ùå [OTP VERIFY] C√≥digo inv√°lido:", finalOtpCode);
        throw new AppError(
          "C√≥digo deve ter exatamente 6 d√≠gitos",
          400,
          "INVALID_CODE_FORMAT"
        );
      }

      console.log(
        `‚úÖ [OTP VERIFY] Validando OTP: ${finalOtpCode} para ${email}, prop√≥sito: ${purpose}`
      );

      // ‚úÖ CHAMAR O SERVI√áO
      const result = await this.otpService.verifyOTP(
        email,
        finalOtpCode,
        purpose
      );

      if (!result.success) {
        console.log(`‚ùå [OTP VERIFY] Falha na verifica√ß√£o: ${result.message}`);
        throw new AppError(result.message, 400, "OTP_VERIFICATION_FAILED");
      }

      console.log(`üéâ [OTP VERIFY] OTP verificado com sucesso para: ${email}`);

      res.status(200).json({
        success: true,
        message: result.message,
        data: {
          email,
          verified: true,
          purpose,
          verifiedAt: new Date().toISOString(),
        },
      });
    } catch (error) {
      next(error);
    }
  };

  public resendOTP = async (
    req: Request,
    res: Response,
    next: NextFunction
  ) => {
    try {
      const { email, name } = req.body;

      console.log("üîÑ [OTP RESEND] Recebendo requisi√ß√£o:", { email, name });

      if (!email) {
        throw new AppError("Email √© obrigat√≥rio", 400, "MISSING_EMAIL");
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        throw new AppError("Formato de email inv√°lido", 400, "INVALID_EMAIL");
      }

      const result = await this.otpService.resendOTP(email, name);

      if (!result.success) {
        throw new AppError(
          `Aguarde ${result.retryAfter} segundos para solicitar um novo c√≥digo`,
          429,
          "OTP_RATE_LIMITED"
        );
      }

      console.log(`‚úÖ [OTP RESEND] OTP reenviado com sucesso para: ${email}`);

      res.status(200).json({
        success: true,
        message: "Novo c√≥digo de verifica√ß√£o enviado para seu email",
        data: {
          email,
          expiresIn: "10 minutos",
        },
      });
    } catch (error) {
      next(error);
    }
  };

  public getStatus = async (
    req: Request,
    res: Response,
    next: NextFunction
  ) => {
    try {
      const { email } = req.params;

      console.log("üìä [OTP STATUS] Recebendo requisi√ß√£o para:", email);

      if (!email) {
        throw new AppError("Email √© obrigat√≥rio", 400, "MISSING_EMAIL");
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        throw new AppError("Formato de email inv√°lido", 400, "INVALID_EMAIL");
      }

      const status = await this.otpService.getOTPStatus(email);

      console.log(`‚úÖ [OTP STATUS] Status recuperado para: ${email}`);

      res.status(200).json({
        success: true,
        data: status,
      });
    } catch (error) {
      next(error);
    }
  };

  public checkVerification = async (
    req: Request,
    res: Response,
    next: NextFunction
  ) => {
    try {
      const { email, purpose = "registration" } = req.params;

      console.log("üîç [OTP CHECK] Verificando email:", { email, purpose });

      if (!email) {
        throw new AppError("Email √© obrigat√≥rio", 400, "MISSING_EMAIL");
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        throw new AppError("Formato de email inv√°lido", 400, "INVALID_EMAIL");
      }

      const isVerified = await this.otpService.isEmailVerified(email, purpose);

      console.log(
        `‚úÖ [OTP CHECK] Verifica√ß√£o conclu√≠da para: ${email} - ${
          isVerified ? "VERIFICADO" : "N√ÉO VERIFICADO"
        }`
      );

      res.status(200).json({
        success: true,
        data: {
          email,
          purpose,
          isVerified,
          verifiedAt: isVerified ? new Date().toISOString() : null,
        },
      });
    } catch (error) {
      next(error);
    }
  };

  public cleanup = async (req: Request, res: Response, next: NextFunction) => {
    try {
      console.log("üßπ [OTP CLEANUP] Iniciando limpeza de OTPs expirados");

      const result = await this.otpService.cleanupExpiredOTPs();

      console.log(
        `‚úÖ [OTP CLEANUP] Limpeza conclu√≠da: ${result.deleted} OTPs expirados removidos`
      );

      res.status(200).json({
        success: true,
        message: `Limpeza conclu√≠da: ${result.deleted} OTPs expirados removidos`,
        data: result,
      });
    } catch (error) {
      next(error);
    }
  };

  public checkActiveOTP = async (
    req: Request,
    res: Response,
    next: NextFunction
  ) => {
    try {
      const { email } = req.params;
      const { purpose } = req.query;

      console.log("üîç [OTP ACTIVE] Verificando OTP ativo para:", {
        email,
        purpose,
      });

      if (!email) {
        throw new AppError("Email √© obrigat√≥rio", 400, "MISSING_EMAIL");
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        throw new AppError("Formato de email inv√°lido", 400, "INVALID_EMAIL");
      }

      const hasActiveOTP = await this.otpService.hasActiveOTP(
        email,
        purpose as string
      );

      console.log(
        `‚úÖ [OTP ACTIVE] Verifica√ß√£o conclu√≠da: ${email} - ${
          hasActiveOTP ? "TEM OTP ATIVO" : "SEM OTP ATIVO"
        }`
      );

      res.status(200).json({
        success: true,
        data: {
          email,
          purpose: purpose || "registration",
          hasActiveOTP,
          checkedAt: new Date().toISOString(),
        },
      });
    } catch (error) {
      next(error);
    }
  };
}
